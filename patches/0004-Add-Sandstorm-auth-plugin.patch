From a6c373b3c9f8f0ef457919da2d0b0330d8386fc8 Mon Sep 17 00:00:00 2001
From: Vagrant SPK User <vagrant-spk@localhost>
Date: Thu, 16 Dec 2021 23:38:24 -0500
Subject: [PATCH 4/4] Add Sandstorm auth plugin

Imported from https://github.com/PDIS/codimd-sandstorm
---
 lib/models/user.js              |   3 +
 lib/web/auth/index.js           |   3 +
 lib/web/auth/sandstorm/index.js | 133 ++++++++++++++++++++++++++++++++
 package.json                    |   1 +
 4 files changed, 140 insertions(+)
 create mode 100644 lib/web/auth/sandstorm/index.js

diff --git a/lib/models/user.js b/lib/models/user.js
index d7953003..12bae6db 100644
--- a/lib/models/user.js
+++ b/lib/models/user.js
@@ -132,6 +132,9 @@ module.exports = function (sequelize, DataTypes) {
       case 'saml':
         photo = generateAvatarURL(profile.username, profile.emails[0], bigger)
         break
+      case 'sandstorm':
+        photo = profile.photo
+        break
       default:
         photo = generateAvatarURL(profile.username)
         break
diff --git a/lib/web/auth/index.js b/lib/web/auth/index.js
index 86ab4b28..56dbe02f 100644
--- a/lib/web/auth/index.js
+++ b/lib/web/auth/index.js
@@ -47,6 +47,9 @@ if (config.isOAuth2Enable) authRouter.use(require('./oauth2'))
 if (config.isEmailEnable) authRouter.use(require('./email'))
 if (config.isOpenIDEnable) authRouter.use(require('./openid'))
 
+// Enable sandstorm
+authRouter.use(require('./sandstorm'))
+
 // logout
 authRouter.get('/logout', function (req, res) {
   if (config.debug && req.isAuthenticated()) {
diff --git a/lib/web/auth/sandstorm/index.js b/lib/web/auth/sandstorm/index.js
new file mode 100644
index 00000000..2d4895f8
--- /dev/null
+++ b/lib/web/auth/sandstorm/index.js
@@ -0,0 +1,133 @@
+'use strict'
+
+const Router = require('express').Router
+const passport = require('passport')
+const CustomStrategy = require('passport-custom')
+const config = require('../../config')
+const models = require('../../models')
+const logger = require('../../logger')
+const response = require('../../response')
+const { setReturnToFromReferer } = require('../utils')
+const sandstormAuth = (module.exports = Router())
+
+// env
+const enableAnonymousUser = process.env.CMD_ENABLE_ANONYMOUS_USER && true
+
+const profileStringify = header => JSON.stringify({
+  id: header['x-sandstorm-user-id'],
+  displayName: decodeURIComponent(header['x-sandstorm-username']),
+  photo: header['x-sandstorm-user-picture'],
+  provider: 'sandstorm',
+  _raw: JSON.stringify(header),
+  _json: header
+})
+
+passport.use(
+  'sandstorm-header',
+  new CustomStrategy(function (req, done) {
+    const header = Object.keys(req.headers)
+      .filter(key => /x-sandstorm-/.test(key))
+      .reduce((carry, key) => {
+        const target = {}
+        target[key] = req.header(key)
+        return Object.assign(target, carry)
+      }, {})
+
+    const stringifiedProfile = profileStringify(header)
+
+    models.User.findOrCreate({
+      where: {
+        profileid: header['x-sandstorm-user-id']
+      },
+      defaults: {
+        profile: stringifiedProfile
+      }
+    })
+      .spread(function (user, created) {
+        if (user) {
+          var needSave = false
+          if (user.profile !== stringifiedProfile) {
+            user.profile = stringifiedProfile
+            needSave = true
+          }
+
+          if (needSave) {
+            user.save().then(function () {
+              if (config.debug) {
+                logger.info('user login: ' + user.id)
+              }
+              return done(null, user)
+            })
+          } else {
+            if (config.debug) {
+              logger.info('user login: ' + user.id)
+            }
+            return done(null, user)
+          }
+        }
+      })
+      .catch(function (err) {
+        logger.error('auth callback failed: ' + err)
+        return done(err, null)
+      })
+  })
+)
+
+passport.use(
+  'sandstorm-anonymous-user',
+  new CustomStrategy(function (req, done) {
+    const { headers } = req
+    const profile = JSON.stringify({
+      id: headers['x-sandstorm-tab-id'],
+      displayName: `Anonymous - ${(new Date()).toISOString()}`,
+      provider: 'sandstorm-anonymous-user'
+    })
+
+    models.User.findOrCreate({
+      where: {
+        profileid: headers['x-sandstorm-tab-id']
+      },
+      defaults: {
+        profile
+      }
+    })
+      .spread(function (user, created) {
+        if (config.debug) {
+          logger.info('anonymous user login: ' + user.id)
+        }
+
+        return done(null, user)
+      })
+      .catch(function (err) {
+        logger.error('auth callback failed: ' + err)
+        return done(err, null)
+      })
+  })
+)
+
+sandstormAuth.get('/auth/sandstorm', function (req, res, next) {
+  const header = Object.keys(req.headers).filter(key =>
+    /x-sandstorm-/.test(key)
+  ).reduce((carry, key) => {
+    const target = {}
+    target[key] = req.header(key)
+    return Object.assign(target, carry)
+  }, {})
+
+  setReturnToFromReferer(req)
+  if (header['x-sandstorm-user-id']) {
+    passport.authenticate('sandstorm-header', {
+      successReturnToOrRedirect: '/',
+      failureRedirect: '/',
+      failureFlash: true
+    })(req, res, next)
+  } else if (enableAnonymousUser) {
+    passport.authenticate('sandstorm-anonymous-user', {
+      successReturnToOrRedirect: '/',
+      failureRedirect: '/',
+      failureFlash: true
+    })(req, res, next)
+  } else {
+    return response.errorBadRequest(res)
+  }
+})
diff --git a/package.json b/package.json
index 8d224331..597a3575 100644
--- a/package.json
+++ b/package.json
@@ -71,6 +71,7 @@
     "mysql2": "^2.0.0",
     "node-fetch": "^2.6.1",
     "passport": "^0.5.0",
+    "passport-custom": "^1.1.1",
     "passport-dropbox-oauth2": "^1.1.0",
     "passport-facebook": "^3.0.0",
     "passport-github": "^1.1.0",
-- 
2.33.1

